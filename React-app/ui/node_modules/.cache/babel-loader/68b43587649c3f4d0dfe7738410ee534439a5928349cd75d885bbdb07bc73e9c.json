{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEB_DEV\\\\React-app\\\\React-Project\\\\ui\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check if dark mode was previously set in localStorage\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedMode = localStorage.getItem('darkMode');\n    return savedMode ? JSON.parse(savedMode) : false;\n  });\n\n  // Save to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n    // Also apply to the body element\n    document.body.classList.toggle('dark-mode', darkMode);\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      setDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"+eEHQBXjCMb0tBmMFm3Ty1iicLA=\");\n_c = ThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","darkMode","setDarkMode","savedMode","localStorage","getItem","JSON","parse","setItem","stringify","document","body","classList","toggle","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/WEB_DEV/React-app/React-Project/ui/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check if dark mode was previously set in localStorage\r\n  const [darkMode, setDarkMode] = useState(() => {\r\n    const savedMode = localStorage.getItem('darkMode');\r\n    return savedMode ? JSON.parse(savedMode) : false;\r\n  });\r\n\r\n  // Save to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\r\n    // Also apply to the body element\r\n    document.body.classList.toggle('dark-mode', darkMode);\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, setDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IAC7C,MAAMa,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAClD,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,KAAK;EAClD,CAAC,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACdY,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEF,IAAI,CAACG,SAAS,CAACR,QAAQ,CAAC,CAAC;IAC1D;IACAS,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEZ,QAAQ,CAAC;EACvD,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA,CAACC,YAAY,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEd,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EACrDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACnB,GAAA,CAnBWF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAqB1B,eAAeH,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}